<?php
/****************************************************************************
  Copyright 2015 Benato Denis

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 *******************************************************************************/

namespace Gishiki\Logging {
    
    /**
    * An helper class for storing logs of what happens on the server
    *
    * Benato Denis <benato.denis96@gmail.com>
    */
    class Log {
        private $unix_timestamp;
        private $info;
        private $level;
        private $details;
        private $stackTrace;
        
        /**
         * Setup a new log entry
         * 
         * @param string $info
         * @param string $details
         * @param integer $priority
         */
        public function __construct($info, $details = "", $priority = Priority::WARNING) {
            //setup the log
            $this->unix_timestamp = time();
            $this->info = $info;
            $this->details = $details;
            $this->stackTrace = NULL;
            
            //assign a priority to the current log
            $this->ChangePriority($priority);
       }
       
       /**
        * Add details to the current log entry
        * 
        * @param string $newDetails details to be added
        */
       public function AddDetails($newDetails) {
            if (gettype($newDetails) == "string") {
                $this->details = $this->details.$newDetails;
            }
       }
       
       /**
        * Change the priority of the current log
        * 
        * @param integer $priorityLevel one of the Gishiki\Logging\Priority priority code
        */
       public function ChangePriority($priorityLevel) {
           if (($priorityLevel != Priority::ERROR) && ($priorityLevel != Priority::EXCEPTION) && ($priorityLevel != Priority::INFO) && ($priorityLevel != Priority::WARNING)) {
               $this->level = Priority::UNKNOWN;
           } else {
               $this->level = $priorityLevel;
           }
       }
       
       /**
        * Add a stack trace of the PHP execution to the log, so it will be easier 
        * check for errors. The stack trace is given as an array, it can 
        * be a stack trace of an exception or generated by debug_backtrace()
        * 
        * @param array $stackTrace the stack trace
        */
       public function AddStackTrace($stackTrace = NULL) {
           //add the current stack trace if no one was provided
           if (gettype($stackTrace) != "array") {
               $this->stackTrace = debug_backtrace();
           } else {
               $this->stackTrace = $stackTrace;
           }
       }
       
       /**
        * Save the current log where it can be read in the future
        */
       public function Save() {
           //add the current stack trace if no one was provided
           $this->AddStackTrace();
           
           //build the log structure
           $logStruct = [
               "timestamp"      => $this->unix_timestamp,
               "information"    => $this->info,
               "details"        => $this->details,
               "level"          => $this->level,
               "trace"          => $this->stackTrace
           ];
           
           //encode the log structure in something that can be saved easily
           $logEntry = json_encode($logStruct);
           
           //request write permission, lock the file and write the newly created log entry on it
           file_put_contents(\Gishiki\Core\Environment::GetCurrentEnvironment()->GetConfigurationProperty("LOG_FILE"), $logEntry.PHP_EOL, FILE_APPEND | LOCK_EX);
       }
    }

}

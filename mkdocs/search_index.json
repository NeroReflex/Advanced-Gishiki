{
    "docs": [
        {
            "location": "/", 
            "text": "Gishiki\n\n\nGishiki\n: a modern and elegant MVC framework for PHP \n= 5.6 and HHVM.\n\n\nGishiki means 'ritual' in japanese, this name was chosen because this framework will help you to perform the\nritual of creation and deployment of web digital contents.\n\n\nDue to its design this framework won't force you to use its features: you are completely free of using it as you wish,\neven if that breaks up MVC principles and/or uses a custom ORM.\n\n\nGishiki is so fast to deploy that you don't even need to configure it to get started!\n\n\nGive it a shot!\n\n\nYou want to try it, just to see if it really works, don't you?\n\n\nWell, to test it you need to \ninstall\n it!\n\n\nLicense\n\n\nGishiki is released under Apache-2.0 license terms, read the \nLICENSE\n to find out more!", 
            "title": "Home"
        }, 
        {
            "location": "/#gishiki", 
            "text": "Gishiki : a modern and elegant MVC framework for PHP  = 5.6 and HHVM.  Gishiki means 'ritual' in japanese, this name was chosen because this framework will help you to perform the\nritual of creation and deployment of web digital contents.  Due to its design this framework won't force you to use its features: you are completely free of using it as you wish,\neven if that breaks up MVC principles and/or uses a custom ORM.  Gishiki is so fast to deploy that you don't even need to configure it to get started!", 
            "title": "Gishiki"
        }, 
        {
            "location": "/#give-it-a-shot", 
            "text": "You want to try it, just to see if it really works, don't you?  Well, to test it you need to  install  it!", 
            "title": "Give it a shot!"
        }, 
        {
            "location": "/#license", 
            "text": "Gishiki is released under Apache-2.0 license terms, read the  LICENSE  to find out more!", 
            "title": "License"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling Gishiki is really simple, even a child could be able to do it:\nhowever, in order to succeed you need to complete following steps.\n\n\nWindows\n\n\nYou may want to test Gishiki or develop your application on Windows:\nto install the application on windows you should install \nXAMPP\n and enable PDO drivers on php.ini. \n\n\nMac OS X\n\n\nIf you are willing to develop your application on a Mac system you should use\n\nXAMPP\n too!\n\n\nVirtual Machine\n\n\nIf you don't want to pollute your desktop environment you can use a virtualization\nprogram to install \nUbuntu Server\n and follow the tutorial on that virtual machine!\n\n\nWebserver (Apache 2)\n\n\nGishiki is a framework for the web.... of course, you need to setup a web server!\n\n\nIf you are using a debian or ubuntu based distro you just:\n\n\nsudo apt-get install apache2 php5 php5-sqlite php5-pgsql php5-mysql libapache2-mod-php5 nano git\nsudo a2enmod rewrite\nsudo nano /etc/apache2/sites-available/000-default.conf\nsudo service apache2 restart\n\n\n\n\nYou must have AllowOverride set to \"All\" and not to \"None\" in the file being edited by nano.\n\n\nWhen you are done with nano just ctrl+O, Enter, ctrl+X.\n\n\nWebserver (nginx)\n\n\nYou may want to use nginx.... That's legit and smart, but you already know how to \ndo your job, so just remember to enable the rewriting engine:\n\n\nserver {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have \ncgi.fix_pathinfo = 0;\n in php.ini\n\n        # With php5-fpm:\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}\n\n\n\n\nPHP v7\n\n\nThis framework is fully compatible with PHP 7, and you are encouraged to use it.\n\n\nPHP v7 is the PHP version I am using while developing Gishiki.\n\n\nInstallation depends on your system, so read the PHP manual (or google for instructions....).\n\n\nHHVM\n\n\nDo you like facebook virtual machine for PHP? Great! Gishiki can run on top of it, \n\n\nbut you are going to install HHVM all by yourself (following facebook documentation).\n\n\nPHP Extensions\n\n\nAs written in the README.md file you will need a PHP version that has the following extensions enabled:\n\n\n\n\nOpenSSL extension (usually included in the standard PHP release)\n\n\nlibxml2 extension (usually included in the standard PHP release)\n\n\nPDO extension and the PDO driver for your database\n\n\ncURL extension\n\n\n\n\nAlthough it is not strictly necessary I suggest you to install the SQLite PDO extension,\nbecause you will have a super-fast database already configured you can play on, \nimmediatly after the installation went fine!\n\n\nGetting the framework\n\n\nSo... did you managed to arrive here? Fine! now let's dig into the real installation process:\n\n\ncd /var/www/html/Gishiki\ngit clone https://github.com/NeroReflex/Gishiki.git\ngit checkout master\n\n\n\n\nIn the above steps you can checkout the development branch to have the latest,\ncutting-edge (and unstable) version of the framework to play with.\n\n\nGetting the framework (alternative)\n\n\nI hope you like unzipping, because it is what you will do after \ndownloading a release (or a snapshot of your favourite branch)!\n\n\nsudo apt-get install unzip\nunzip Gishiki-X.Y.Z.zip -d /var/www/html\n\n\n\n\nSetting privileges\n\n\nGishiki needs to create a directory inside its installation path, so you have to\ngrant writing priviledges to php on your Gishiki installation directory.\n\n\nIt is your responsibility to do it right, but for testing purpouses you can just\n\n\nchmod -R 0775 Gishiki\n\n\n\n\nNEVER do this in a public machine or in the production environment/server!\nYou have been warned......\n\n\nStarting a new application\n\n\nDirect your browser to the Gishiki directory and presto!\n\n\nA new directory called application have appeared on your server...\nJust explore it! The framework has given you a fresh start:\n\n\n\n\nsettings file is named setting.json\n\n\na model descriptor in an XML file (named bookstore.xml)\n\n\nan SQLite database with the table to use the bookstore example\n\n\na routing + controller example named router.php\n\n\nobscure encryption stuff (discussed later)\n\n\n\n\nWhy don't directing your browser to the \nbook insertion example\n?\n\n\nThis should help you understanding routing and model creation (just look at router.php).\n\n\nIf you check your sqlite database you will notice that.....\n\n\nWhat's next?\n\n\nTo start learning how to accomplish things you have to learn what the framework does when a request arrives from a client.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing Gishiki is really simple, even a child could be able to do it:\nhowever, in order to succeed you need to complete following steps.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#windows", 
            "text": "You may want to test Gishiki or develop your application on Windows:\nto install the application on windows you should install  XAMPP  and enable PDO drivers on php.ini.", 
            "title": "Windows"
        }, 
        {
            "location": "/installation/#mac-os-x", 
            "text": "If you are willing to develop your application on a Mac system you should use XAMPP  too!", 
            "title": "Mac OS X"
        }, 
        {
            "location": "/installation/#virtual-machine", 
            "text": "If you don't want to pollute your desktop environment you can use a virtualization\nprogram to install  Ubuntu Server  and follow the tutorial on that virtual machine!", 
            "title": "Virtual Machine"
        }, 
        {
            "location": "/installation/#webserver-apache-2", 
            "text": "Gishiki is a framework for the web.... of course, you need to setup a web server!  If you are using a debian or ubuntu based distro you just:  sudo apt-get install apache2 php5 php5-sqlite php5-pgsql php5-mysql libapache2-mod-php5 nano git\nsudo a2enmod rewrite\nsudo nano /etc/apache2/sites-available/000-default.conf\nsudo service apache2 restart  You must have AllowOverride set to \"All\" and not to \"None\" in the file being edited by nano.  When you are done with nano just ctrl+O, Enter, ctrl+X.", 
            "title": "Webserver (Apache 2)"
        }, 
        {
            "location": "/installation/#webserver-nginx", 
            "text": "You may want to use nginx.... That's legit and smart, but you already know how to \ndo your job, so just remember to enable the rewriting engine:  server {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have  cgi.fix_pathinfo = 0;  in php.ini\n\n        # With php5-fpm:\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}", 
            "title": "Webserver (nginx)"
        }, 
        {
            "location": "/installation/#php-v7", 
            "text": "This framework is fully compatible with PHP 7, and you are encouraged to use it.  PHP v7 is the PHP version I am using while developing Gishiki.  Installation depends on your system, so read the PHP manual (or google for instructions....).", 
            "title": "PHP v7"
        }, 
        {
            "location": "/installation/#hhvm", 
            "text": "Do you like facebook virtual machine for PHP? Great! Gishiki can run on top of it,   but you are going to install HHVM all by yourself (following facebook documentation).", 
            "title": "HHVM"
        }, 
        {
            "location": "/installation/#php-extensions", 
            "text": "As written in the README.md file you will need a PHP version that has the following extensions enabled:   OpenSSL extension (usually included in the standard PHP release)  libxml2 extension (usually included in the standard PHP release)  PDO extension and the PDO driver for your database  cURL extension   Although it is not strictly necessary I suggest you to install the SQLite PDO extension,\nbecause you will have a super-fast database already configured you can play on, \nimmediatly after the installation went fine!", 
            "title": "PHP Extensions"
        }, 
        {
            "location": "/installation/#getting-the-framework", 
            "text": "So... did you managed to arrive here? Fine! now let's dig into the real installation process:  cd /var/www/html/Gishiki\ngit clone https://github.com/NeroReflex/Gishiki.git\ngit checkout master  In the above steps you can checkout the development branch to have the latest,\ncutting-edge (and unstable) version of the framework to play with.", 
            "title": "Getting the framework"
        }, 
        {
            "location": "/installation/#getting-the-framework-alternative", 
            "text": "I hope you like unzipping, because it is what you will do after \ndownloading a release (or a snapshot of your favourite branch)!  sudo apt-get install unzip\nunzip Gishiki-X.Y.Z.zip -d /var/www/html", 
            "title": "Getting the framework (alternative)"
        }, 
        {
            "location": "/installation/#setting-privileges", 
            "text": "Gishiki needs to create a directory inside its installation path, so you have to\ngrant writing priviledges to php on your Gishiki installation directory.  It is your responsibility to do it right, but for testing purpouses you can just  chmod -R 0775 Gishiki  NEVER do this in a public machine or in the production environment/server!\nYou have been warned......", 
            "title": "Setting privileges"
        }, 
        {
            "location": "/installation/#starting-a-new-application", 
            "text": "Direct your browser to the Gishiki directory and presto!  A new directory called application have appeared on your server...\nJust explore it! The framework has given you a fresh start:   settings file is named setting.json  a model descriptor in an XML file (named bookstore.xml)  an SQLite database with the table to use the bookstore example  a routing + controller example named router.php  obscure encryption stuff (discussed later)   Why don't directing your browser to the  book insertion example ?  This should help you understanding routing and model creation (just look at router.php).  If you check your sqlite database you will notice that.....", 
            "title": "Starting a new application"
        }, 
        {
            "location": "/installation/#whats-next", 
            "text": "To start learning how to accomplish things you have to learn what the framework does when a request arrives from a client.", 
            "title": "What's next?"
        }, 
        {
            "location": "/apidoc/", 
            "text": "API Documentation\n\n\nThe API Documentation is automatically build from PHPDoc comments into the Gishiki source code.\n\n\nThe API Documentation is the most advanced and up-to-date documentation you can find,\nbut you will need to know how to use Gishiki before understanding that documentation.\n\n\nThe API Documentation is perfect to have an overview of what you can do using Gishiki and \nhow Gishiki is organized internally.\n\n\nAccessing the docs\n\n\nYou can access the API Documentation from \nhere\n.", 
            "title": "API"
        }, 
        {
            "location": "/apidoc/#api-documentation", 
            "text": "The API Documentation is automatically build from PHPDoc comments into the Gishiki source code.  The API Documentation is the most advanced and up-to-date documentation you can find,\nbut you will need to know how to use Gishiki before understanding that documentation.  The API Documentation is perfect to have an overview of what you can do using Gishiki and \nhow Gishiki is organized internally.", 
            "title": "API Documentation"
        }, 
        {
            "location": "/apidoc/#accessing-the-docs", 
            "text": "You can access the API Documentation from  here .", 
            "title": "Accessing the docs"
        }, 
        {
            "location": "/usage/routing/", 
            "text": "Routing\n\n\nWhen a request arrives the framework must fulfill it.\n\n\nThe framework automatically maps a request to a resource located at \"https://site.com/Home\" into \"/Home\" (GET request).\n\n\nThe /Home string is the URI of the requested resource, the GET request is the HTTP method used to query that resource...\nthe question is.... \n\n\nHow do I route that request to what I want to serve? The answer is: using the router!\n\n\nThe router is that fantastic component empowering your user-friendly URLs!\n\n\nCustom static rules\n\n\nLet's see how to create a custom route:\n\n\nuse \\Gishiki\\Core\\Routing;\n\nRouting::setRoute(Routing::GET, \n/Home\n, function() {\n    //this is what will be executed when the client asks for \nhttps://site.com/Home\n\n\n    //let's just forget about MVC pattern this time :)\n    echo \nHello, World!\n;\n});\n\n\n\n\nTo try this rule open rules.php and paste the provided code into it and direct your browser to: https://site.com/Home\n\n\nCustom dynamic rules\n\n\nThis route is really simple: just an URI check... but you are creating a dynamic application, \nand URIs cannot be static URIs every time, in fact sooner or later you will need to capture a parameter passed \nas a parameter with the URL.\n\n\nLet's just consider this simple example:\n\n\nuse \\Gishiki\\Core\\Routing;\n\nRouting::setRoute(Routing::GET, \n/Home/{name}\n, function($params) {\n    //this is what will be executed when the client asks for \nhttps://site.com/Home\n\n\n    //nice to meet you!\n    echo \nHello, \n.$params-\nget(\nname\n).\n!\n;\n});\n\n\n\n\nYou already know what you are going to do, right? :D\n\n\nhttps://site.com/Home/your_name and you will see \"Hello, your_name!\" nothing complex here, right?\n\n\nDifferent methods\n\n\nAs for HTTP standards a client can perform a resource request using this methods:\n\n\n\n\nGET identified as Routing::GET\n\n\nPOST  identified as Routing::POST\n\n\nDELETE identified as Routing::DELETE\n\n\nPUT identified as Routing::PUT\n\n\nHEAD identified as Routing::HEAD\n\n\n\n\nWhen you set a routing rule (either static or dynamic) you have to select the method you want to serve\nin that route.\n\n\nThis is particulary handy when creating a RESTful service.\n\n\nError catching\n\n\nYou know.... things doesn't always go as you want....\n\n\nThis means it is necessary to think about unexpected circumstances. You do it by setting an error callback, \nwhich is nothing more than a bit special routing rule:\n\n\nuse \\Gishiki\\Core\\Routing;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n\n    //error message!\n    echo \nSorry man, you are asking for something I can't give you :(\n;\n});\n\n\n\n\nAs you can see an error routing rule (or error callback) is unique for all request methods.\n\n\nLimitation\n\n\nYou cannot route URIs that start with /API/ or /service/ because they are reserved for web services (explained in a different chapter).\n\n\nYou cannot match something that has a slash '/' character using a dynamic placeholder: {name} cannot capture something like \"mario/rossi\".\n\n\nConclusions\n\n\nYou can consider your anonymous functions passed to the routing as your controllers: they will be the glue between\nyour models and your views! \n\n\nThe router is the fastest and easiest component within Gishiki, \nbecause it is the first component that is used and the only one you \nREALLY HAVE TO\n use.\n\n\nThis means that you are now good to go... Everything you \nMUST\n know in order to use Gishiki ends here.\n\n\nEverything else is a plus you may need to accelerate the development of your projects!", 
            "title": "Router"
        }, 
        {
            "location": "/usage/routing/#routing", 
            "text": "When a request arrives the framework must fulfill it.  The framework automatically maps a request to a resource located at \"https://site.com/Home\" into \"/Home\" (GET request).  The /Home string is the URI of the requested resource, the GET request is the HTTP method used to query that resource...\nthe question is....   How do I route that request to what I want to serve? The answer is: using the router!  The router is that fantastic component empowering your user-friendly URLs!", 
            "title": "Routing"
        }, 
        {
            "location": "/usage/routing/#custom-static-rules", 
            "text": "Let's see how to create a custom route:  use \\Gishiki\\Core\\Routing;\n\nRouting::setRoute(Routing::GET,  /Home , function() {\n    //this is what will be executed when the client asks for  https://site.com/Home \n\n    //let's just forget about MVC pattern this time :)\n    echo  Hello, World! ;\n});  To try this rule open rules.php and paste the provided code into it and direct your browser to: https://site.com/Home", 
            "title": "Custom static rules"
        }, 
        {
            "location": "/usage/routing/#custom-dynamic-rules", 
            "text": "This route is really simple: just an URI check... but you are creating a dynamic application, \nand URIs cannot be static URIs every time, in fact sooner or later you will need to capture a parameter passed \nas a parameter with the URL.  Let's just consider this simple example:  use \\Gishiki\\Core\\Routing;\n\nRouting::setRoute(Routing::GET,  /Home/{name} , function($params) {\n    //this is what will be executed when the client asks for  https://site.com/Home \n\n    //nice to meet you!\n    echo  Hello,  .$params- get( name ). ! ;\n});  You already know what you are going to do, right? :D  https://site.com/Home/your_name and you will see \"Hello, your_name!\" nothing complex here, right?", 
            "title": "Custom dynamic rules"
        }, 
        {
            "location": "/usage/routing/#different-methods", 
            "text": "As for HTTP standards a client can perform a resource request using this methods:   GET identified as Routing::GET  POST  identified as Routing::POST  DELETE identified as Routing::DELETE  PUT identified as Routing::PUT  HEAD identified as Routing::HEAD   When you set a routing rule (either static or dynamic) you have to select the method you want to serve\nin that route.  This is particulary handy when creating a RESTful service.", 
            "title": "Different methods"
        }, 
        {
            "location": "/usage/routing/#error-catching", 
            "text": "You know.... things doesn't always go as you want....  This means it is necessary to think about unexpected circumstances. You do it by setting an error callback, \nwhich is nothing more than a bit special routing rule:  use \\Gishiki\\Core\\Routing;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n\n    //error message!\n    echo  Sorry man, you are asking for something I can't give you :( ;\n});  As you can see an error routing rule (or error callback) is unique for all request methods.", 
            "title": "Error catching"
        }, 
        {
            "location": "/usage/routing/#limitation", 
            "text": "You cannot route URIs that start with /API/ or /service/ because they are reserved for web services (explained in a different chapter).  You cannot match something that has a slash '/' character using a dynamic placeholder: {name} cannot capture something like \"mario/rossi\".", 
            "title": "Limitation"
        }, 
        {
            "location": "/usage/routing/#conclusions", 
            "text": "You can consider your anonymous functions passed to the routing as your controllers: they will be the glue between\nyour models and your views!   The router is the fastest and easiest component within Gishiki, \nbecause it is the first component that is used and the only one you  REALLY HAVE TO  use.  This means that you are now good to go... Everything you  MUST  know in order to use Gishiki ends here.  Everything else is a plus you may need to accelerate the development of your projects!", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/logging/", 
            "text": "Logging\n\n\nGishiki comes with a simple and small logging library that uses the UNIX logging daemon (and its emulation on Windows).\n\n\nThe behaviour of the logger depends on the syslogd configuration: the standard behaviour is to save each log entry \ninto a log file, together with any other software message.\n\n\nCreate \n Save\n\n\nEach log entry instance you create from the Log class is automatically saved using syslogd.\n\n\nCreating a log entry is pretty simple:\n\n\nuse \\Gishiki\\Core\\Routing;\nuse \\Gishiki\\Logging\\Log;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n    new Log(\n404 Not Foud\n, \nA user has tried to access the resource located at URI: \n.Routing::getRequestURI());\n\n    //error message!\n    echo \nSorry man, you are asking for something I can't give you :(\n;\n});\n\n\n\n\nSince the syslogd is something that is not (and MUST be not) accessible by the client you can log everything you want, \nthe user will never notice the creation of a log entry.\n\n\nPriority\n\n\nPriorities are important as in software development as in real life.\n\n\nTo help you better organizing your priorities you can change the default priority of a log entry:\n\n\nuse \\Gishiki\\Core\\Routing;\nuse \\Gishiki\\Logging\\Log;\nuse \\Gishiki\\Logging\\Priority;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n    new Log(\n404 Not Foud\n, \nA user has tried to access the resource located at URI: \n.Routing::getRequestURI(), Priority::INFO);\n\n    //error message!\n    echo \nSorry man, you are asking for something I can't give you :(\n;\n});\n\n\n\n\nYou have these log priorities available:\n\n\n\n\nPriority::EMERGENCY\n\n\nPriority::ALERT\n\n\nPriority::CRITICAL\n\n\nPriority::ERROR\n\n\nPriority::WARNING\n\n\nPriority::NOTICE\n\n\nPriority::INFO\n\n\nPriority::DEBUG\n\n\n\n\nWhen create a log choose the best priority for that log entry (default is Priority::WARNING).\n\n\nFind out more\n\n\nThis is everything you should know to use the logger, but if you want something more advanced you will have to read the\nAPI documentation.\n\n\nConfigure syslogd\n\n\nConfiguring syslog is pretty easy, but I can give you an example of file redirection for syslog-ng:\n\n\ndestination df_userapp { file(\n/var/www/html/application/logs/current.log\n); };\n\nfilter f_userapp { program(\nGishiki\n); };\n\nlog {\n    source(s_all);\n    filter(f_userapp);\n    destination(df_userapp);\n};\n\n\n\n\nWhat i gave you is just a simple example to get you started... There is no limit of what you can do with the logging daemon,\nso configure it as you want (read your syslogd documentation).\n\n\nExceptions autologging\n\n\nEvery exception that inherits from Gishiki_Exception and call the parent constructor is automatically logged with \nthe Priority::CRITICAL level of priority.\n\n\nConclusions\n\n\nThe logger is (just like the router is) designed to be fast and super-easy to use, but that is achieved without \nlosing the usage flexibility.", 
            "title": "Logger"
        }, 
        {
            "location": "/usage/logging/#logging", 
            "text": "Gishiki comes with a simple and small logging library that uses the UNIX logging daemon (and its emulation on Windows).  The behaviour of the logger depends on the syslogd configuration: the standard behaviour is to save each log entry \ninto a log file, together with any other software message.", 
            "title": "Logging"
        }, 
        {
            "location": "/usage/logging/#create-save", 
            "text": "Each log entry instance you create from the Log class is automatically saved using syslogd.  Creating a log entry is pretty simple:  use \\Gishiki\\Core\\Routing;\nuse \\Gishiki\\Logging\\Log;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n    new Log( 404 Not Foud ,  A user has tried to access the resource located at URI:  .Routing::getRequestURI());\n\n    //error message!\n    echo  Sorry man, you are asking for something I can't give you :( ;\n});  Since the syslogd is something that is not (and MUST be not) accessible by the client you can log everything you want, \nthe user will never notice the creation of a log entry.", 
            "title": "Create &amp; Save"
        }, 
        {
            "location": "/usage/logging/#priority", 
            "text": "Priorities are important as in software development as in real life.  To help you better organizing your priorities you can change the default priority of a log entry:  use \\Gishiki\\Core\\Routing;\nuse \\Gishiki\\Logging\\Log;\nuse \\Gishiki\\Logging\\Priority;\n\nRouting::setErrorCallback(Routing::NotFoudCallback, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n    new Log( 404 Not Foud ,  A user has tried to access the resource located at URI:  .Routing::getRequestURI(), Priority::INFO);\n\n    //error message!\n    echo  Sorry man, you are asking for something I can't give you :( ;\n});  You have these log priorities available:   Priority::EMERGENCY  Priority::ALERT  Priority::CRITICAL  Priority::ERROR  Priority::WARNING  Priority::NOTICE  Priority::INFO  Priority::DEBUG   When create a log choose the best priority for that log entry (default is Priority::WARNING).", 
            "title": "Priority"
        }, 
        {
            "location": "/usage/logging/#find-out-more", 
            "text": "This is everything you should know to use the logger, but if you want something more advanced you will have to read the\nAPI documentation.", 
            "title": "Find out more"
        }, 
        {
            "location": "/usage/logging/#configure-syslogd", 
            "text": "Configuring syslog is pretty easy, but I can give you an example of file redirection for syslog-ng:  destination df_userapp { file( /var/www/html/application/logs/current.log ); };\n\nfilter f_userapp { program( Gishiki ); };\n\nlog {\n    source(s_all);\n    filter(f_userapp);\n    destination(df_userapp);\n};  What i gave you is just a simple example to get you started... There is no limit of what you can do with the logging daemon,\nso configure it as you want (read your syslogd documentation).", 
            "title": "Configure syslogd"
        }, 
        {
            "location": "/usage/logging/#exceptions-autologging", 
            "text": "Every exception that inherits from Gishiki_Exception and call the parent constructor is automatically logged with \nthe Priority::CRITICAL level of priority.", 
            "title": "Exceptions autologging"
        }, 
        {
            "location": "/usage/logging/#conclusions", 
            "text": "The logger is (just like the router is) designed to be fast and super-easy to use, but that is achieved without \nlosing the usage flexibility.", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/database/management/", 
            "text": "Database support\n\n\nIf you are reading this it means that you are tired of using \nSQL\n, aren't you? :D\n\n\nI know: using SQL is tedious, error-prone and stuck you on a RDBMS, because changing it would force you \nchanging every SQL query you created.\n\n\nIn order to abstract SQL away from your project you need an ORM (Object-relational mapping).\n\n\nGishiki uses an ORM that is similar to ruby's one: PHP ActiveRecord. This ORM has been modified to better integrate \nwith Gishiki.\n\n\nConnection\n\n\nBefore discussing about how you manage your database you have to provide a valid connection to your database.\n\n\nYou do this by editing the config.json file. A connection to a database is a JSON property inside the \nconnections\n\nclass.\n\n\nThe default database connection is named 'default' and you \nshouldn't\n delete it, however you are free to change it.\n\n\nAdding a database connection is as simple as adding a JSON property like: \"\nconnection_name\n\": \"\nconnection_str\n\".\n\n\nThe connection string is something like:\n\n\nserver://username:password@host:port/db_name\n\n\n\n\nYou can specify a charset that a database will use:\n\n\nserver://username:password@host:port/db_name?charset=utf8\n\n\n\n\nYou can find some examples of database connections on the settings file, but I am going to give a better explaination here.\n\n\nBefore testing out a connection remember to install the required PDO driver for your database server!\n\n\nMySQL Connection\n\n\nMySQL is the second most widely used RDBMS in the world (as of April 2016), and one of the RDBMS with more project forks!\n\n\nWith a MySQL connection you can connect to \nMySQL\n, \nPercona Server\n, \nMariaDB\n and many more!\n\n\nWhen connecting to a MySQL server you have to use \"mysql\" as the server protocol:\n\n\nmysql://root:admin@localhost/site_db\n\n\n\n\nAs you can see if you don't specify a server port the dafault one will be used (in MySQL it is 3306).\n\n\nOracle Connection\n\n\nIf you are using Oracle as your RDBMS you can connect to your database exactly like you would connect to a MySQL database...\nyou just need to change mysql with oci:\n\n\noci://root:admin@host:port/site_db\n\n\n\n\nand et voila' Oracle database connection performed!\n\n\nPostgreSQL Connection\n\n\nI can't believe people are just ingnoring the fantastic \nPostgreSQL\n project: \nit is a fantastic RDBMS with a great usage license!\n\n\nEveryone should think about PostgreSQL as its first choice as RDBMS, because it is easy to use, mature, \nwell supported and really performs well!\n\n\nTo enstabilish a connection with a Postgre server you  have to use pgsql as the server protocol:\n\n\npgsql://root:admin@host:port/site_db\n\n\n\n\nIf you don't provide a port to your connection the ORM will use the default PostgreSQL port, which is the 5432 port.\n\n\nSQLite Connection\n\n\nConnecting to a sqlite database is super simple: you just provide the file name:\n\n\nsqlite://../relative/path/database_file.db\n\n\n\n\nOn a Unix system you can provide the full path to a database this way:\n\n\nsqlite://unix(/var/database_file.db)\n\n\n\n\nOn a windows system you can do the exact same thing:\n\n\nsqlite://unix(C:\\absolute\\path\\database_file.db)\n\n\n\n\nIf you adopt this solution you can keep the database file outside the web-server directory.\n\n\nUsing SQLite is great for prototyping but you don't want a sqlite file to be \nyour database in a production environment due to the limited number of concurrent \naccesses sqlite can handle.\n\n\nConclusions\n\n\nConnecting a database is simple, using it even more: the connection string is \nthe only thing you have to change when changing RDBMS and/or host!\n\n\nAs you may have noticed you settings file now contains your database password! \nYou \nMUST\n ensure no one will ever be able to reach that file!", 
            "title": "Management"
        }, 
        {
            "location": "/usage/database/management/#database-support", 
            "text": "If you are reading this it means that you are tired of using  SQL , aren't you? :D  I know: using SQL is tedious, error-prone and stuck you on a RDBMS, because changing it would force you \nchanging every SQL query you created.  In order to abstract SQL away from your project you need an ORM (Object-relational mapping).  Gishiki uses an ORM that is similar to ruby's one: PHP ActiveRecord. This ORM has been modified to better integrate \nwith Gishiki.", 
            "title": "Database support"
        }, 
        {
            "location": "/usage/database/management/#connection", 
            "text": "Before discussing about how you manage your database you have to provide a valid connection to your database.  You do this by editing the config.json file. A connection to a database is a JSON property inside the  connections \nclass.  The default database connection is named 'default' and you  shouldn't  delete it, however you are free to change it.  Adding a database connection is as simple as adding a JSON property like: \" connection_name \": \" connection_str \".  The connection string is something like:  server://username:password@host:port/db_name  You can specify a charset that a database will use:  server://username:password@host:port/db_name?charset=utf8  You can find some examples of database connections on the settings file, but I am going to give a better explaination here.  Before testing out a connection remember to install the required PDO driver for your database server!", 
            "title": "Connection"
        }, 
        {
            "location": "/usage/database/management/#mysql-connection", 
            "text": "MySQL is the second most widely used RDBMS in the world (as of April 2016), and one of the RDBMS with more project forks!  With a MySQL connection you can connect to  MySQL ,  Percona Server ,  MariaDB  and many more!  When connecting to a MySQL server you have to use \"mysql\" as the server protocol:  mysql://root:admin@localhost/site_db  As you can see if you don't specify a server port the dafault one will be used (in MySQL it is 3306).", 
            "title": "MySQL Connection"
        }, 
        {
            "location": "/usage/database/management/#oracle-connection", 
            "text": "If you are using Oracle as your RDBMS you can connect to your database exactly like you would connect to a MySQL database...\nyou just need to change mysql with oci:  oci://root:admin@host:port/site_db  and et voila' Oracle database connection performed!", 
            "title": "Oracle Connection"
        }, 
        {
            "location": "/usage/database/management/#postgresql-connection", 
            "text": "I can't believe people are just ingnoring the fantastic  PostgreSQL  project: \nit is a fantastic RDBMS with a great usage license!  Everyone should think about PostgreSQL as its first choice as RDBMS, because it is easy to use, mature, \nwell supported and really performs well!  To enstabilish a connection with a Postgre server you  have to use pgsql as the server protocol:  pgsql://root:admin@host:port/site_db  If you don't provide a port to your connection the ORM will use the default PostgreSQL port, which is the 5432 port.", 
            "title": "PostgreSQL Connection"
        }, 
        {
            "location": "/usage/database/management/#sqlite-connection", 
            "text": "Connecting to a sqlite database is super simple: you just provide the file name:  sqlite://../relative/path/database_file.db  On a Unix system you can provide the full path to a database this way:  sqlite://unix(/var/database_file.db)  On a windows system you can do the exact same thing:  sqlite://unix(C:\\absolute\\path\\database_file.db)  If you adopt this solution you can keep the database file outside the web-server directory.  Using SQLite is great for prototyping but you don't want a sqlite file to be \nyour database in a production environment due to the limited number of concurrent \naccesses sqlite can handle.", 
            "title": "SQLite Connection"
        }, 
        {
            "location": "/usage/database/management/#conclusions", 
            "text": "Connecting a database is simple, using it even more: the connection string is \nthe only thing you have to change when changing RDBMS and/or host!  As you may have noticed you settings file now contains your database password! \nYou  MUST  ensure no one will ever be able to reach that file!", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/database/models/", 
            "text": "Models\n\n\nYou \nshould\n read this chapter \nonly\n if you have already read how to \nmanage database connections\n \nwhere you learn how to connect with your database.\n\n\nIn this chapter you will learn what a model is and how you create and use one.\n\n\nModels are the 'M' in 'MVC': they are the interface you use to load, store and access \nyour data within your application.\n\n\nDefining a model\n\n\nA model looks like a PHP file (inside the Models directory) containing a class \nthat inherits from the \\Activerecord\\Model class:\n\n\nclass BookSeller extends \\Activerecord\\Model { }\n\n\n\n\nActiveRecord uses Ruby's ActiveRecord naming conventions, so.... this class is a \ndirect representation of the table named 'book_sellers' inside the default database.\n\n\nYou can change both: the database you connect to and the name that the table has\ninside the database pointed by the database connection:\n\n\nclass BookSeller extends \\Activerecord\\Model {\n    # explicit the connection name since the default one is not going to be used\n    static $connection = 'development';\n\n    # explicit the table name since the real table name is not 'book_sellers'\n    static $table_name = 'book_shop';\n\n}\n\n\n\n\nEvery table you create a model from \nMUST\n contains a primary key, and if the \nname of the primary key is \nNOT\n 'id' you will have to specify it in the model:\n\n\nclass BookSeller extends \\Activerecord\\Model {\n    # the primary key of the table isn't named 'id'\n    static $primary_key = 'b_seller_ID';\n}\n\n\n\n\nAs you can see it is really simple to map a database table inside a PHP class. \nThis brings you many advantages, many of them are:\n\n\n\n\nNo hand-writte SQL\n\n\nData storage engine abstraction\n\n\nEasy RDBMS migration\n\n\nRapid development\n\n\nBetter logical organization of your data\n\n\nEasy data management\n\n\nSeparation of application data and application logic\n\n\nOperations are easy to read and understand\n\n\n\n\nBasic model operations\n\n\nYou have represented a database table as a PHP class, where class properties are \nthe table fields; now you need to create an instance of that model and perform read/write \non properties of that object!\n\n\nLet's consider a table named 'books' that has a primary key named 'id', a (TEXT) field 'title', \na (TEXT) field 'author', a (REAL) field 'price' and a (DATETIME) field 'publication_date':\n\n\nclass Book extends \\Activerecord\\Model { }\n\n$my_book = new Book();\n$my_book-\ntitle = 'Example Book';\n$my_book-\nauthor = 'Example Author';\n$my_book-\nprice = 29.99;\n$my_book-\npublication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');\n\n\n\n\nWhat? Ugly to look at? Ok...\n\n\n$my_book = new Book(['title' =\n 'Example Book', \n                        'author' =\n 'Example Author',\n                        'price' =\n 29.99,\n                        'publication_date' =\n new ActiveRecord\\DateTime('2016-04-04 17:56:30')]);\n\n\n\n\nOh? What was that!? Was my database filled!?!? How?!?!? Where?!?!?\n\n\nYup. As explained in the \nCRUD\n section, in order to simplify even more your \ndatabase interaction, you have your models being saved automatically!\n\n\nAdvanced model operations\n\n\nAccessiong your model data as a class property can be easy, but it doesn't give you \na lot of flexibility: think about a password: You want to encrypt a password before \nstoring it into the database... You would need to do something like this:\n\n\nclass User extends \\Activerecord\\Model { }\n\n$my_user = new User();\n//$my_user-\n....\n\n//encrypt the passowrd\n$enc_pwd = encrypt($plain_password);\n$my_user-\npassword = $enc_pwd;\n\n\n\n\nIt is ugly to read, you will mostly likely forget to encrypt() your password somewere\nand you will need to call unencrypt() each time you want to read the password.\n\n\nIn this situation you \nshould\n use custom getters and setters, allowing you to \nabstract away from your controllers the encryption stuff, embedding it into the model:\n\n\nclass User extends \\Activerecord\\Model {\n    public function set_password($plain_password) {\n        $this-\nassign_attribute('password', encrypt($plain_password));\n    }\n\n    public function get_password() {\n        $encrypted = read_attribute('password');\n        return unencrypt($encrypted);\n    }\n}\n\n$my_user = new User();\n$my_user-\npassword = $plain_password;\n\necho $my_user-\npassword; //print out $plain_password\n\n\n\n\nNote: you \ncan\n call setters and getter you created, if you want:\n\n\n$my_user = new User();\n$my_user-\nset_password($plain_password);\n\necho $my_user-\nget_password(); //print out $plain_password\n\n\n\n\nIf you call a custom getter/setter you haven't created it will result in a standard value\nread/write, without custom behaviour, so... just use the syntax you like the most when\ndealing with your models.\n\n\nDate and Time\n\n\nAs you can see from above examples you need to use ActiveRecord\\DateTime object when\ndealing with a model property that represents time.\n\n\nDateTime usage is not explained here, it is so simple you can understand everything just by reading the \nAPI\n.\n\n\nConclusions\n\n\nStore 'n' Load\n: what this chapter describes is how to deal whit your data when \nit is in-memory, however not your entire data can reside into volatile memory: \nthis is why you are using a database, right?\n\n\nThis means it must be a way to easily manage your data on the database...\n\n\nActually, it is really simple, you can find everything in the \nCRUD\n section.", 
            "title": "Models"
        }, 
        {
            "location": "/usage/database/models/#models", 
            "text": "You  should  read this chapter  only  if you have already read how to  manage database connections  \nwhere you learn how to connect with your database.  In this chapter you will learn what a model is and how you create and use one.  Models are the 'M' in 'MVC': they are the interface you use to load, store and access \nyour data within your application.", 
            "title": "Models"
        }, 
        {
            "location": "/usage/database/models/#defining-a-model", 
            "text": "A model looks like a PHP file (inside the Models directory) containing a class \nthat inherits from the \\Activerecord\\Model class:  class BookSeller extends \\Activerecord\\Model { }  ActiveRecord uses Ruby's ActiveRecord naming conventions, so.... this class is a \ndirect representation of the table named 'book_sellers' inside the default database.  You can change both: the database you connect to and the name that the table has\ninside the database pointed by the database connection:  class BookSeller extends \\Activerecord\\Model {\n    # explicit the connection name since the default one is not going to be used\n    static $connection = 'development';\n\n    # explicit the table name since the real table name is not 'book_sellers'\n    static $table_name = 'book_shop';\n\n}  Every table you create a model from  MUST  contains a primary key, and if the \nname of the primary key is  NOT  'id' you will have to specify it in the model:  class BookSeller extends \\Activerecord\\Model {\n    # the primary key of the table isn't named 'id'\n    static $primary_key = 'b_seller_ID';\n}  As you can see it is really simple to map a database table inside a PHP class. \nThis brings you many advantages, many of them are:   No hand-writte SQL  Data storage engine abstraction  Easy RDBMS migration  Rapid development  Better logical organization of your data  Easy data management  Separation of application data and application logic  Operations are easy to read and understand", 
            "title": "Defining a model"
        }, 
        {
            "location": "/usage/database/models/#basic-model-operations", 
            "text": "You have represented a database table as a PHP class, where class properties are \nthe table fields; now you need to create an instance of that model and perform read/write \non properties of that object!  Let's consider a table named 'books' that has a primary key named 'id', a (TEXT) field 'title', \na (TEXT) field 'author', a (REAL) field 'price' and a (DATETIME) field 'publication_date':  class Book extends \\Activerecord\\Model { }\n\n$my_book = new Book();\n$my_book- title = 'Example Book';\n$my_book- author = 'Example Author';\n$my_book- price = 29.99;\n$my_book- publication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');  What? Ugly to look at? Ok...  $my_book = new Book(['title' =  'Example Book', \n                        'author' =  'Example Author',\n                        'price' =  29.99,\n                        'publication_date' =  new ActiveRecord\\DateTime('2016-04-04 17:56:30')]);  Oh? What was that!? Was my database filled!?!? How?!?!? Where?!?!?  Yup. As explained in the  CRUD  section, in order to simplify even more your \ndatabase interaction, you have your models being saved automatically!", 
            "title": "Basic model operations"
        }, 
        {
            "location": "/usage/database/models/#advanced-model-operations", 
            "text": "Accessiong your model data as a class property can be easy, but it doesn't give you \na lot of flexibility: think about a password: You want to encrypt a password before \nstoring it into the database... You would need to do something like this:  class User extends \\Activerecord\\Model { }\n\n$my_user = new User();\n//$my_user- ....\n\n//encrypt the passowrd\n$enc_pwd = encrypt($plain_password);\n$my_user- password = $enc_pwd;  It is ugly to read, you will mostly likely forget to encrypt() your password somewere\nand you will need to call unencrypt() each time you want to read the password.  In this situation you  should  use custom getters and setters, allowing you to \nabstract away from your controllers the encryption stuff, embedding it into the model:  class User extends \\Activerecord\\Model {\n    public function set_password($plain_password) {\n        $this- assign_attribute('password', encrypt($plain_password));\n    }\n\n    public function get_password() {\n        $encrypted = read_attribute('password');\n        return unencrypt($encrypted);\n    }\n}\n\n$my_user = new User();\n$my_user- password = $plain_password;\n\necho $my_user- password; //print out $plain_password  Note: you  can  call setters and getter you created, if you want:  $my_user = new User();\n$my_user- set_password($plain_password);\n\necho $my_user- get_password(); //print out $plain_password  If you call a custom getter/setter you haven't created it will result in a standard value\nread/write, without custom behaviour, so... just use the syntax you like the most when\ndealing with your models.", 
            "title": "Advanced model operations"
        }, 
        {
            "location": "/usage/database/models/#date-and-time", 
            "text": "As you can see from above examples you need to use ActiveRecord\\DateTime object when\ndealing with a model property that represents time.  DateTime usage is not explained here, it is so simple you can understand everything just by reading the  API .", 
            "title": "Date and Time"
        }, 
        {
            "location": "/usage/database/models/#conclusions", 
            "text": "Store 'n' Load : what this chapter describes is how to deal whit your data when \nit is in-memory, however not your entire data can reside into volatile memory: \nthis is why you are using a database, right?  This means it must be a way to easily manage your data on the database...  Actually, it is really simple, you can find everything in the  CRUD  section.", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/database/CRUD/", 
            "text": "CRUD\n\n\nCRUD stands for \nC\nreate, \nR\nead, \nU\npdate and \nD\nelete.\n\n\nThose are the names of most common operations you perform on your database, \nand the easiest way you have to manage your database using your models.\n\n\nCreate and Update\n\n\nCreate the representation of a model inside your database and updating an existing \none are two tasks ActiveRecord automatically performs when yours models exit from\nthe volatile memory.\n\n\nThis actually prevent you from accidentally lose data, spending hours to find \nwhere you are losing your data :( or to design your store logic.\n\n\nDespite the fact your model instances are automatically saved (by default) you \ncan \nmanually\n trigger the save operation calling the save() function on the model\nyou want to be saved:\n\n\nclass Book extends \\Activerecord\\Model { }\n\n//edit the book: you modified your book, so it must be saved, or you will lost\n//all of your editings!\n$my_book = new Book();\n$my_book-\ntitle = 'Example Book';\n$my_book-\nauthor = 'Example Author';\n$my_book-\nprice = 29.99;\n$my_book-\npublication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');\n\n//make sure we have saved the book\n$my_book-\nsave();\n\n\n\n\nAre you thinking \"How do I avoid that auto-save foolish usefullness\"?\nIf yes I hope you will re-think about that, but you can get rid of it just by calling \nthe prevent_autosave() function on the model you want to be stopped from being \nautomatically saved into/updated on your database:\n\n\nclass Book extends \\Activerecord\\Model { }\n\n//edit the book: you modified your book, so it must be saved, or you will lost\n//all of your editings!\n$my_book = new Book();\n$my_book-\ntitle = 'Example Book';\n$my_book-\nauthor = 'Example Author';\n$my_book-\nprice = 29.99;\n$my_book-\npublication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');\n\n//disable autosave\n$my_book-\nprevent_autosave();\n\n//here your book will be lost: YOU HAVE TO SAVE IT!\n$my_book-\nsave();", 
            "title": "CRUD"
        }, 
        {
            "location": "/usage/database/CRUD/#crud", 
            "text": "CRUD stands for  C reate,  R ead,  U pdate and  D elete.  Those are the names of most common operations you perform on your database, \nand the easiest way you have to manage your database using your models.", 
            "title": "CRUD"
        }, 
        {
            "location": "/usage/database/CRUD/#create-and-update", 
            "text": "Create the representation of a model inside your database and updating an existing \none are two tasks ActiveRecord automatically performs when yours models exit from\nthe volatile memory.  This actually prevent you from accidentally lose data, spending hours to find \nwhere you are losing your data :( or to design your store logic.  Despite the fact your model instances are automatically saved (by default) you \ncan  manually  trigger the save operation calling the save() function on the model\nyou want to be saved:  class Book extends \\Activerecord\\Model { }\n\n//edit the book: you modified your book, so it must be saved, or you will lost\n//all of your editings!\n$my_book = new Book();\n$my_book- title = 'Example Book';\n$my_book- author = 'Example Author';\n$my_book- price = 29.99;\n$my_book- publication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');\n\n//make sure we have saved the book\n$my_book- save();  Are you thinking \"How do I avoid that auto-save foolish usefullness\"?\nIf yes I hope you will re-think about that, but you can get rid of it just by calling \nthe prevent_autosave() function on the model you want to be stopped from being \nautomatically saved into/updated on your database:  class Book extends \\Activerecord\\Model { }\n\n//edit the book: you modified your book, so it must be saved, or you will lost\n//all of your editings!\n$my_book = new Book();\n$my_book- title = 'Example Book';\n$my_book- author = 'Example Author';\n$my_book- price = 29.99;\n$my_book- publication_date = new ActiveRecord\\DateTime('2016-04-04 17:56:30');\n\n//disable autosave\n$my_book- prevent_autosave();\n\n//here your book will be lost: YOU HAVE TO SAVE IT!\n$my_book- save();", 
            "title": "Create and Update"
        }, 
        {
            "location": "/license/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}
{
    "docs": [
        {
            "location": "/", 
            "text": "Gishiki\n\n\nGishiki\n: a modern and elegant MVC framework for PHP \n= 5.6 and HHVM.\n\n\nGishiki means 'ritual' in japanese, this name was chosen because this framework will help you to perform the\nritual of creation and deployment of web digital contents.\n\n\nDue to its design this framework won't force you to use its features: you are completely free of using it as you wish,\neven if that breaks up MVC principles and/or uses a custom ORM.\n\n\nGishiki is so fast to deploy that you don't even need to configure it to get started!\n\n\nGive it a shot!\n\n\nYou want to try it, just to see if it really works, don't you?\n\n\nWell, to test it you need to \ninstall\n it!\n\n\nLicense\n\n\nGishiki is released under Apache-2.0 license terms, read the \nLICENSE\n to find out more!", 
            "title": "Home"
        }, 
        {
            "location": "/#gishiki", 
            "text": "Gishiki : a modern and elegant MVC framework for PHP  = 5.6 and HHVM.  Gishiki means 'ritual' in japanese, this name was chosen because this framework will help you to perform the\nritual of creation and deployment of web digital contents.  Due to its design this framework won't force you to use its features: you are completely free of using it as you wish,\neven if that breaks up MVC principles and/or uses a custom ORM.  Gishiki is so fast to deploy that you don't even need to configure it to get started!", 
            "title": "Gishiki"
        }, 
        {
            "location": "/#give-it-a-shot", 
            "text": "You want to try it, just to see if it really works, don't you?  Well, to test it you need to  install  it!", 
            "title": "Give it a shot!"
        }, 
        {
            "location": "/#license", 
            "text": "Gishiki is released under Apache-2.0 license terms, read the  LICENSE  to find out more!", 
            "title": "License"
        }, 
        {
            "location": "/installation/environment/", 
            "text": "Installation\n\n\nInstalling Gishiki is really simple, even a child could be able to do it:\nhowever, in order to succeed you need to complete some steps.\n\n\nYou don't have to follow all the reported steps: you setup your environment,\nyour composer installation (local and/or remote) and presto!\n\n\nWindows\n\n\nYou may want to test Gishiki or develop your application on Windows:\nto install the application on windows you should install \nXAMPP\n and enable PDO drivers on php.ini. \n\n\nMac OS X\n\n\nIf you are willing to develop your application on a Mac system you should use\n\nXAMPP\n too!\n\n\nLinux\n\n\nEvery production server runs on a linux or a container inside linux, this is why\nevery instruction you'll find are written for linux (Ubuntu 14.04/15.04 LTS).\n\n\nVirtual Machine\n\n\nIf you don't want to pollute your desktop environment you can use a virtualization\nprogram, like \nVirtualBox\n, to install \nUbuntu Server\n and\nfollow the tutorial on that virtual machine!\n\n\nLet's go!\n\n\nIf you are a newcomer that doesn't like Heroku (or don't wanto to use it) \nI suggest you to follow the PHP 7.0 \n nginx tutorial I have written for you.\n\n\nIf you want something that works in a few seconds Heroku is the right manual page!", 
            "title": "Environment"
        }, 
        {
            "location": "/installation/environment/#installation", 
            "text": "Installing Gishiki is really simple, even a child could be able to do it:\nhowever, in order to succeed you need to complete some steps.  You don't have to follow all the reported steps: you setup your environment,\nyour composer installation (local and/or remote) and presto!", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/environment/#windows", 
            "text": "You may want to test Gishiki or develop your application on Windows:\nto install the application on windows you should install  XAMPP  and enable PDO drivers on php.ini.", 
            "title": "Windows"
        }, 
        {
            "location": "/installation/environment/#mac-os-x", 
            "text": "If you are willing to develop your application on a Mac system you should use XAMPP  too!", 
            "title": "Mac OS X"
        }, 
        {
            "location": "/installation/environment/#linux", 
            "text": "Every production server runs on a linux or a container inside linux, this is why\nevery instruction you'll find are written for linux (Ubuntu 14.04/15.04 LTS).", 
            "title": "Linux"
        }, 
        {
            "location": "/installation/environment/#virtual-machine", 
            "text": "If you don't want to pollute your desktop environment you can use a virtualization\nprogram, like  VirtualBox , to install  Ubuntu Server  and\nfollow the tutorial on that virtual machine!", 
            "title": "Virtual Machine"
        }, 
        {
            "location": "/installation/environment/#lets-go", 
            "text": "If you are a newcomer that doesn't like Heroku (or don't wanto to use it) \nI suggest you to follow the PHP 7.0   nginx tutorial I have written for you.  If you want something that works in a few seconds Heroku is the right manual page!", 
            "title": "Let's go!"
        }, 
        {
            "location": "/installation/php_7_nginx/", 
            "text": "PHP v7 / nginx\n\n\nThis framework is fully compatible with PHP 7, and you are encouraged to use it.\n\n\nPHP v7 is the PHP version I am using while developing Gishiki.\n\n\nInstallation depends on your system, so read the PHP manual (or google for instructions....).\n\n\nYou will be provided with ubuntu instructions:\n\n\nsudo add-apt-repository ppa:ondrej/php\nsudo apt-get update\nsudo apt-get install -y language-pack-en-base\nsudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php\nsudo apt-get install nginx php7.0 php7.0-dev php7.0-xml php7.0-fpm php7.0-mysql php7.0-sqlite php7.0-pgsql php7.0-curl\n\n\n\n\nWhen you are done with the configuration file (/etc/nginx/sites-enabled/default), \nwhich should be basically:\n\n\nserver {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have \ncgi.fix_pathinfo = 0;\n in php.ini\n\n        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; # this is important (YOU MUST CHECK FOR THIS FILE!)\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}\n\n\n\n\nyou restart the server and the php service:\n\n\nsudo service nginx restart\nsudo service php7.0-fpm restart\n\n\n\n\nAnd the server should just work!", 
            "title": "PHP 7.0 & nginx"
        }, 
        {
            "location": "/installation/php_7_nginx/#php-v7-nginx", 
            "text": "This framework is fully compatible with PHP 7, and you are encouraged to use it.  PHP v7 is the PHP version I am using while developing Gishiki.  Installation depends on your system, so read the PHP manual (or google for instructions....).  You will be provided with ubuntu instructions:  sudo add-apt-repository ppa:ondrej/php\nsudo apt-get update\nsudo apt-get install -y language-pack-en-base\nsudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php\nsudo apt-get install nginx php7.0 php7.0-dev php7.0-xml php7.0-fpm php7.0-mysql php7.0-sqlite php7.0-pgsql php7.0-curl  When you are done with the configuration file (/etc/nginx/sites-enabled/default), \nwhich should be basically:  server {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have  cgi.fix_pathinfo = 0;  in php.ini\n\n        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; # this is important (YOU MUST CHECK FOR THIS FILE!)\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}  you restart the server and the php service:  sudo service nginx restart\nsudo service php7.0-fpm restart  And the server should just work!", 
            "title": "PHP v7 / nginx"
        }, 
        {
            "location": "/installation/basic_nginx/", 
            "text": "Basic nginx\n\n\nYou may want to use nginx.... That's legit and smart, but you already know how to \ndo your job, so just remember to enable PHP and the rewriting engine:\n\n\nserver {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have \ncgi.fix_pathinfo = 0;\n in php.ini\n\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}\n\n\n\n\nYour server configuration file should be located at /etc/nginx/nginx.conf", 
            "title": "Basic nginx"
        }, 
        {
            "location": "/installation/basic_nginx/#basic-nginx", 
            "text": "You may want to use nginx.... That's legit and smart, but you already know how to \ndo your job, so just remember to enable PHP and the rewriting engine:  server {\n    listen 80;\n    server_name site.com;\n    root /var/www/html/Gishiki;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # NOTE: You should have  cgi.fix_pathinfo = 0;  in php.ini\n\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_intercept_errors on;\n    }\n}  Your server configuration file should be located at /etc/nginx/nginx.conf", 
            "title": "Basic nginx"
        }, 
        {
            "location": "/installation/basic_apache/", 
            "text": "Webserver (Apache 2)\n\n\nIf you are using a debian or ubuntu based distro you have to remember that you\nneed to enable mod_rewrite on apache:\n\n\nsudo a2enmod rewrite\nsudo nano /etc/apache2/sites-available/000-default.conf\nsudo service apache2 restart\n\n\n\n\nYou must have AllowOverride set to \"All\" and not to \"None\" in the file being edited by nano.\n\n\nWhen you are done with nano just ctrl+O, Enter, ctrl+X.\n\n\nYou can simply cut 'n' paste this configuration:\n\n\nVirtualHost *:80\n\n    #ServerName www.example.com\n\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        # globally allow .htaccess\n    \nDirectory \n/var/www/html\n\n        AllowOverride All\n    \n/Directory\n\n\n/VirtualHost\n\n\n# vim: syntax=apache ts=4 sw=4 sts=4 sr noet\n\n\n\n\nRemember that using .htaccess slows down your apache server, so if you have access\nto the configuration file of your production server you \nshould\n embed the provided .htaccess.", 
            "title": "Basic apache"
        }, 
        {
            "location": "/installation/basic_apache/#webserver-apache-2", 
            "text": "If you are using a debian or ubuntu based distro you have to remember that you\nneed to enable mod_rewrite on apache:  sudo a2enmod rewrite\nsudo nano /etc/apache2/sites-available/000-default.conf\nsudo service apache2 restart  You must have AllowOverride set to \"All\" and not to \"None\" in the file being edited by nano.  When you are done with nano just ctrl+O, Enter, ctrl+X.  You can simply cut 'n' paste this configuration:  VirtualHost *:80 \n    #ServerName www.example.com\n\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        # globally allow .htaccess\n     Directory  /var/www/html \n        AllowOverride All\n     /Directory  /VirtualHost \n\n# vim: syntax=apache ts=4 sw=4 sts=4 sr noet  Remember that using .htaccess slows down your apache server, so if you have access\nto the configuration file of your production server you  should  embed the provided .htaccess.", 
            "title": "Webserver (Apache 2)"
        }, 
        {
            "location": "/installation/composer/", 
            "text": "Composer\n\n\nAs promised Gishiki is not meant to replace your favourite tools: you can still use all of them!\n\n\nDoctrine? Propel? Zend framework components? Symfony components? No problem!\n\n\nYou have to install them and you do that using composer! If you don't have composer run:\n\n\nphp -r \nreadfile('https://getcomposer.org/installer');\n \n composer-setup.php\nphp -r \nif (hash('SHA384', file_get_contents('composer-setup.php')) === '7228c001f88bee97506740ef0888240bd8a760b046ee16db8f4095c0d8d525f2367663f22a46b48d072c816e7fe19959') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\n\nphp composer-setup.php\nphp -r \nunlink('composer-setup.php');\n\n\n\n\n\nRemember that composer is essential to run Gishiki: composer is what loads the\nentire framework and manages the framework version!\n\n\nBootstrapping an application\n\n\nYou like digging immediatly into development? No problem!\n\n\nI have setup a \nsmall application\n example you can fork to have something you can\ninstantly develop on!\n\n\nFresh start\n\n\nYou like reading documentation or you have great experience with Gishiki? Another time... No problem!\n\n\nYou can use composer to start up your new project!\n\n\nphp composer.phar create-project neroreflex/gishiki path\n\n\n\n\nnice and easy! Good work!", 
            "title": "Composer"
        }, 
        {
            "location": "/installation/composer/#composer", 
            "text": "As promised Gishiki is not meant to replace your favourite tools: you can still use all of them!  Doctrine? Propel? Zend framework components? Symfony components? No problem!  You have to install them and you do that using composer! If you don't have composer run:  php -r  readfile('https://getcomposer.org/installer');    composer-setup.php\nphp -r  if (hash('SHA384', file_get_contents('composer-setup.php')) === '7228c001f88bee97506740ef0888240bd8a760b046ee16db8f4095c0d8d525f2367663f22a46b48d072c816e7fe19959') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL; \nphp composer-setup.php\nphp -r  unlink('composer-setup.php');   Remember that composer is essential to run Gishiki: composer is what loads the\nentire framework and manages the framework version!", 
            "title": "Composer"
        }, 
        {
            "location": "/installation/composer/#bootstrapping-an-application", 
            "text": "You like digging immediatly into development? No problem!  I have setup a  small application  example you can fork to have something you can\ninstantly develop on!", 
            "title": "Bootstrapping an application"
        }, 
        {
            "location": "/installation/composer/#fresh-start", 
            "text": "You like reading documentation or you have great experience with Gishiki? Another time... No problem!  You can use composer to start up your new project!  php composer.phar create-project neroreflex/gishiki path  nice and easy! Good work!", 
            "title": "Fresh start"
        }, 
        {
            "location": "/apidoc/", 
            "text": "API Documentation\n\n\nThe API Documentation is automatically build from PHPDoc comments into the Gishiki source code.\n\n\nThe API Documentation is the most advanced and up-to-date documentation you can find,\nbut you will need to know how to use Gishiki before understanding that documentation.\n\n\nThe API Documentation is perfect to have an overview of what you can do using Gishiki and \nhow Gishiki is organized internally.\n\n\nAccessing the docs\n\n\nYou can access the API Documentation from \nhere\n.\n\n\nIf you are totally unable to understand what is described there just don't worry about\nit, you can do amazing things even without reading that thing!", 
            "title": "API"
        }, 
        {
            "location": "/apidoc/#api-documentation", 
            "text": "The API Documentation is automatically build from PHPDoc comments into the Gishiki source code.  The API Documentation is the most advanced and up-to-date documentation you can find,\nbut you will need to know how to use Gishiki before understanding that documentation.  The API Documentation is perfect to have an overview of what you can do using Gishiki and \nhow Gishiki is organized internally.", 
            "title": "API Documentation"
        }, 
        {
            "location": "/apidoc/#accessing-the-docs", 
            "text": "You can access the API Documentation from  here .  If you are totally unable to understand what is described there just don't worry about\nit, you can do amazing things even without reading that thing!", 
            "title": "Accessing the docs"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nGishiki is a bit tricky to configure, but don't worry: you just need to remember\n3 or 4 things:\n\n\nthe real configuration file and application descriptor is stored inside the application\ndirectory (alongside with the environment.ini file) and is called settings.json\n\n\nIt has a fixed structure:\n\n\n{\n    \ngeneral\n: {\n        \ndevelopment\n: true,\n        \nautolog\n: null\n    },\n\n    \ndatabase_connections\n: {\n            \ndevelopment\n:  \n{{@DATABASE_URL}}\n,\n            \ndefault\n: \n{{@DATABASE_URL}}\n,\n            \nsecure_connection\n: {\n\n            }\n    },\n\n    \ncache\n: {\n        \nenabled\n: false,\n        \nserver\n: \nmemcached://localhost:11211\n\n    },\n\n    \nsecurity\n: {\n        \nserverPassword\n: \n{{@MASTER_KEY}}\n,\n        \nserverKey\n: \n{{@SERVER_KEY}}\n\n    },\n\n    \ncookies\n: {\n        \ncookiesPrefix\n: \n{{@COOKIES_PRE}}\n,\n        \ncookiesEncryptedPrefix\n: \n{{@COOKIES_ENC_PRE}}\n,\n        \ncookiesKey\n: \n{{@COOKIES_KEY}}\n,\n        \ncookiesExpiration\n: 5184000,\n        \ncookiesPath\n: \n/\n\n    }\n}\n\n\n\n\nAs you might have thought those {{@VAR_NAMES}} are replaced with constants defined\nin your environment AND/OR Heroku \"Config Variables\"!\n\n\nThis is a GREAT feature that keeps SECRET your database connection descriptor and\nyour master server key while allowing application portability among illimitate environments!", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "Gishiki is a bit tricky to configure, but don't worry: you just need to remember\n3 or 4 things:  the real configuration file and application descriptor is stored inside the application\ndirectory (alongside with the environment.ini file) and is called settings.json  It has a fixed structure:  {\n     general : {\n         development : true,\n         autolog : null\n    },\n\n     database_connections : {\n             development :   {{@DATABASE_URL}} ,\n             default :  {{@DATABASE_URL}} ,\n             secure_connection : {\n\n            }\n    },\n\n     cache : {\n         enabled : false,\n         server :  memcached://localhost:11211 \n    },\n\n     security : {\n         serverPassword :  {{@MASTER_KEY}} ,\n         serverKey :  {{@SERVER_KEY}} \n    },\n\n     cookies : {\n         cookiesPrefix :  {{@COOKIES_PRE}} ,\n         cookiesEncryptedPrefix :  {{@COOKIES_ENC_PRE}} ,\n         cookiesKey :  {{@COOKIES_KEY}} ,\n         cookiesExpiration : 5184000,\n         cookiesPath :  / \n    }\n}  As you might have thought those {{@VAR_NAMES}} are replaced with constants defined\nin your environment AND/OR Heroku \"Config Variables\"!  This is a GREAT feature that keeps SECRET your database connection descriptor and\nyour master server key while allowing application portability among illimitate environments!", 
            "title": "Configuration"
        }, 
        {
            "location": "/usage/routing/", 
            "text": "Routing\n\n\nWhen a request arrives the framework must fulfill it.\n\n\nThe framework automatically maps a request to a resource located at \"https://site.com/Home\" into \"/Home\" (GET request).\n\n\nThe /Home string is the URI of the requested resource, the GET request is the HTTP method used to query that resource...\nthe question is.... \n\n\nHow do I route that request to what I want to serve? The answer is: using the router!\n\n\nThe router is that fantastic component empowering your user-friendly URLs!\n\n\nDifferent methods\n\n\nAs for HTTP standards a client can perform a resource request using these verbs:\n\n\n\n\nGET identified as Route::GET\n\n\nPOST  identified as Route::POST\n\n\nDELETE identified as Route::DELETE\n\n\nPUT identified as Route::PUT\n\n\nHEAD identified as Route::HEAD\n\n\n\n\nWhen you set a routing rule (either static or dynamic) you have to select the \nverb that you want to be served in that route.\n\n\nThis is particulary handy when creating a RESTful service.\n\n\nCustom static rules\n\n\nLet's see how to create a custom route:\n\n\nuse \\Gishiki\\Core\\Route;\n\nRoute::get(\n/\n, function() {\n    //this is what will be executed when the client asks for \nhttps://site.com/\n (the homepage)\n\n    //let's just forget about MVC pattern this time :)\n    echo \nHello, World!\n;\n});\n\n\n\n\nTo try this rule out you have to open rules.php and paste the provided code into \nit and direct your browser to: https://site.com/ .\n\n\nCustom dynamic rules\n\n\nThis route is really simple: just an URI check... but you are creating a dynamic application, \nand URIs cannot be static URIs every time, in fact sooner or later you will need to capture a parameter passed \nas a parameter with the URL.\n\n\nLet's just consider this simple example:\n\n\nuse \\Gishiki\\Core\\Route;\n\nRoute::get(\n/Hello/{name surname}\n, function($params) {\n    //this is what will be executed when the client asks for \nhttps://site.com/User/urName urSurname\n\n\n    //nice to meet you!\n    echo \nHello, \n.$params-\n{\nname surname\n}.\n!\n;\n});\n\nRoute::get(\n/Home/{name}\n, function($params) {\n    //this is what will be executed when the client asks for \nhttps://site.com/Home/some_name\n\n\n    //nice to meet you!\n    echo \nHello, \n.$params-\nname.\n!\n;\n});\n\n\n\n\nYou already know what you are going to do, right? :D\n\n\nhttps://site.com/Home/your_name and you will see \"Hello, your_name!\" nothing complex here, right?\n\n\nAll request methods\n\n\nSometimes you may need to register a route that responds to all HTTP verbs, you \nare allowed to do that by using 'any':\n\n\nuse \\Gishiki\\Core\\Route;\n\nRoute::any(\n/\n, function() {\n    //do something general with your homepage!\n});\n\n\n\n\nthe action is taken if that URI is hit, regardless of the method the client used \nto perform the request.\n\n\nTwo or more request methods\n\n\nAn interesting feature of the router is how you create a route for two or more\nrequest methods:\n\n\nuse \\Gishiki\\Core\\Route;\n\nRoute::match([Route::GET, Route::POST], \n/\n, function() {\n    //you want your homepage to be reached only with get and post\n});\n\n\n\n\nthe action is taken if that URI is hit only when using get or post request method. \n\n\nError catching\n\n\nYou know, things doesn't always go as you want: it is necessary to think about \nunexpected circumstances. You do it by setting an error callback, \nwhich is nothing more than a bit special routing rule:\n\n\nuse \\Gishiki\\Core\\Route;\n\nRoute::error(Route::NotFound, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n\n    //error message!\n    echo \nSorry man, you are asking for something I can't give you :(\n;\n});\n\n\n\n\nAs you can see an error routing rule (or error callback) is unique for all request methods.\n\n\nLimitation\n\n\nYou cannot route URIs that start with /API/ or /service/ because they are reserved for web services (explained in a different chapter).\n\n\nYou cannot match something that has a slash '/' character using a dynamic placeholder: {name} cannot capture something like \"mario/rossi\".\n\n\nConclusions\n\n\nYou can consider your anonymous functions passed to the routing as your controllers: they will be the glue between\nyour models and your views! \n\n\nThe router is the fastest and easiest component within Gishiki, \nbecause it is the first component that is used and the only one you \nREALLY HAVE TO\n use.\n\n\nThis means that you are now good to go... Everything you \nMUST\n know in order to use Gishiki ends here.\n\n\nEverything else is a plus you may need to accelerate the development of your projects!", 
            "title": "Router"
        }, 
        {
            "location": "/usage/routing/#routing", 
            "text": "When a request arrives the framework must fulfill it.  The framework automatically maps a request to a resource located at \"https://site.com/Home\" into \"/Home\" (GET request).  The /Home string is the URI of the requested resource, the GET request is the HTTP method used to query that resource...\nthe question is....   How do I route that request to what I want to serve? The answer is: using the router!  The router is that fantastic component empowering your user-friendly URLs!", 
            "title": "Routing"
        }, 
        {
            "location": "/usage/routing/#different-methods", 
            "text": "As for HTTP standards a client can perform a resource request using these verbs:   GET identified as Route::GET  POST  identified as Route::POST  DELETE identified as Route::DELETE  PUT identified as Route::PUT  HEAD identified as Route::HEAD   When you set a routing rule (either static or dynamic) you have to select the \nverb that you want to be served in that route.  This is particulary handy when creating a RESTful service.", 
            "title": "Different methods"
        }, 
        {
            "location": "/usage/routing/#custom-static-rules", 
            "text": "Let's see how to create a custom route:  use \\Gishiki\\Core\\Route;\n\nRoute::get( / , function() {\n    //this is what will be executed when the client asks for  https://site.com/  (the homepage)\n\n    //let's just forget about MVC pattern this time :)\n    echo  Hello, World! ;\n});  To try this rule out you have to open rules.php and paste the provided code into \nit and direct your browser to: https://site.com/ .", 
            "title": "Custom static rules"
        }, 
        {
            "location": "/usage/routing/#custom-dynamic-rules", 
            "text": "This route is really simple: just an URI check... but you are creating a dynamic application, \nand URIs cannot be static URIs every time, in fact sooner or later you will need to capture a parameter passed \nas a parameter with the URL.  Let's just consider this simple example:  use \\Gishiki\\Core\\Route;\n\nRoute::get( /Hello/{name surname} , function($params) {\n    //this is what will be executed when the client asks for  https://site.com/User/urName urSurname \n\n    //nice to meet you!\n    echo  Hello,  .$params- { name surname }. ! ;\n});\n\nRoute::get( /Home/{name} , function($params) {\n    //this is what will be executed when the client asks for  https://site.com/Home/some_name \n\n    //nice to meet you!\n    echo  Hello,  .$params- name. ! ;\n});  You already know what you are going to do, right? :D  https://site.com/Home/your_name and you will see \"Hello, your_name!\" nothing complex here, right?", 
            "title": "Custom dynamic rules"
        }, 
        {
            "location": "/usage/routing/#all-request-methods", 
            "text": "Sometimes you may need to register a route that responds to all HTTP verbs, you \nare allowed to do that by using 'any':  use \\Gishiki\\Core\\Route;\n\nRoute::any( / , function() {\n    //do something general with your homepage!\n});  the action is taken if that URI is hit, regardless of the method the client used \nto perform the request.", 
            "title": "All request methods"
        }, 
        {
            "location": "/usage/routing/#two-or-more-request-methods", 
            "text": "An interesting feature of the router is how you create a route for two or more\nrequest methods:  use \\Gishiki\\Core\\Route;\n\nRoute::match([Route::GET, Route::POST],  / , function() {\n    //you want your homepage to be reached only with get and post\n});  the action is taken if that URI is hit only when using get or post request method.", 
            "title": "Two or more request methods"
        }, 
        {
            "location": "/usage/routing/#error-catching", 
            "text": "You know, things doesn't always go as you want: it is necessary to think about \nunexpected circumstances. You do it by setting an error callback, \nwhich is nothing more than a bit special routing rule:  use \\Gishiki\\Core\\Route;\n\nRoute::error(Route::NotFound, function() {\n    //this is what will be executed when the client asks for an unrouted URI\n\n    //error message!\n    echo  Sorry man, you are asking for something I can't give you :( ;\n});  As you can see an error routing rule (or error callback) is unique for all request methods.", 
            "title": "Error catching"
        }, 
        {
            "location": "/usage/routing/#limitation", 
            "text": "You cannot route URIs that start with /API/ or /service/ because they are reserved for web services (explained in a different chapter).  You cannot match something that has a slash '/' character using a dynamic placeholder: {name} cannot capture something like \"mario/rossi\".", 
            "title": "Limitation"
        }, 
        {
            "location": "/usage/routing/#conclusions", 
            "text": "You can consider your anonymous functions passed to the routing as your controllers: they will be the glue between\nyour models and your views!   The router is the fastest and easiest component within Gishiki, \nbecause it is the first component that is used and the only one you  REALLY HAVE TO  use.  This means that you are now good to go... Everything you  MUST  know in order to use Gishiki ends here.  Everything else is a plus you may need to accelerate the development of your projects!", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/logging/", 
            "text": "Logging\n\n\nGishiki comes with a simple and small logging library that may use different logging\ntechnologies like the UNIX logging daemon (and its emulation on Windows).\n\n\nThe logger included in Gishiki is PSR-3 compilant and is super-simple to setup and use!", 
            "title": "Logger"
        }, 
        {
            "location": "/usage/logging/#logging", 
            "text": "Gishiki comes with a simple and small logging library that may use different logging\ntechnologies like the UNIX logging daemon (and its emulation on Windows).  The logger included in Gishiki is PSR-3 compilant and is super-simple to setup and use!", 
            "title": "Logging"
        }, 
        {
            "location": "/usage/database/management/", 
            "text": "Database support\n\n\nIf you are reading this it means that you are tired of using \nSQL\n or any other native database extension, aren't you? :D\n\n\nI know: using SQL is tedious, error-prone and stucks you on a RDBMS, because changing it would force you \nchanging every SQL query you created.\n\n\nGishiki uses an OHM that is similar to ruby's one and implements the ActiveRecord pattern. \n\n\nYes, that is not a misspell: Gishiki uses an OHM, not an ORM! OHM stands for \"Object-hybrid mapper\"!\nThis OHM has been designed and written from scratch to be perfectly integrated within Gishiki!\n\n\nThe ActiveRecord implementation is meant to support any database you want:\n\n\n\n\nSQLite (~3)\n\n\nMySQL and derivates\n\n\nOracle\n\n\nPostgreSQL\n\n\nMicrosoft SQL Server / Azure\n\n\nSybase\n\n\nfirebase\n\n\nMongoDB (\n= 3.0)\n\n\nCassandra\n\n\n\n\nThis abstract the database away from you, wichever database you may be using! Even non-relation ones!\n\n\nConnection\n\n\nBefore discussing about how you manage your database you have to provide a valid connection to your database.\n\n\nYou do this by editing the config.json file. A connection to a database is a JSON object inside the \ndatabase_connections\n\nclass.\n\n\nThe default database connection is named 'default' and you \nshouldn't\n delete it, however you are free to change it.\n\n\nKeep in mind that there is a connection named 'development' and, like the 'default' one shouldn't be deleted, because that connection\nis the default connection when the framework is in developer mode\n\n\nAdding a database connection is as simple as adding a JSON object to the database_connections object:\n\n\nconnection_name\n: {\n    \ndriver\n: \nmysql\n,\n    \nquery\n: \nroot:admin@localhost/site_db\n\n}\n\n\n\n\nBefore testing out a connection remember to install the required \nPDO driver\n/\nnative extension\n for your database server!\n\n\nQuick Syntax\n\n\nYou can implode the driver and the connection query into a single string, like this\none:\n\n\nconnection_name\n: \nmysql://root:admin@localhost/site_db\n\n\n\n\n\nThis is also especially usefull to integrate Heroku database connection strings!\n\n\nMongoDB\n\n\nMongoDB is for sure a great database and using it will avoid a lot of troubles.\n\n\nThe support for MongoDB is native and to have the better experience possible\nGishiki uses the latest driver available (currenctly the PECL mongodb package).\n\n\nAfter installing the required extension you connect to the database using the\n\nmongodb-style URI\n:\n\n\nconnection_name\n: {\n    \ndriver\n: \nmongodb\n,\n    \nquery\n: \n[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n\n}\n\n\n\n\nNotice that 'mongodb://' is excluded from the connection query.\n\n\nMySQL Connection\n\n\nMySQL is the second most widely used RDBMS in the world (as of April 2016), and one of the RDBMS with more project forks!\n\n\nWith a MySQL connection you can connect to \nMySQL\n, \nPercona Server\n, \nMariaDB\n and many more!\n\n\nWhen connecting to a MySQL server you have to use \"mysql\" as the server protocol:\n\n\nconnection_name\n: {\n    \ndriver\n: \nmysql\n,\n    \nquery\n: \nuser:password@localhost/site_db\n\n}\n\n\n\n\nAs you can see if you don't specify a server port the dafault one will be used (in MySQL it is 3306).\n\n\nTo specify a port you have to append it after the hostname:\n\n\nconnection_name\n: {\n    \ndriver\n: \nmysql\n,\n    \nquery\n: \nuser:password@hostname:port/site_db\n\n}\n\n\n\n\nand the specified port will be used when connecting to the database.\n\n\nOracle Connection\n\n\nIf you are using Oracle as your RDBMS you can connect to your database exactly like\nyou would connect to a MySQL database: you only need to use oci as server protocol!\n\n\nconnection_name\n: {\n    \ndriver\n: \noci\n,\n    \nquery\n: \nuser:password@hostname:port/site_db\n\n}\n\n\n\n\nand et voila' Oracle database connection performed!\n\n\nPostgreSQL Connection\n\n\nI can't believe people are just ingnoring the fantastic \nPostgreSQL\n project: \nit is a fantastic RDBMS with a great usage license!\n\n\nEveryone should think about PostgreSQL as its first choice as RDBMS, because it is easy to use, mature, \nwell supported and really performs well!\n\n\nTo enstabilish a connection with a Postgres server you  have to use pgsql as the server protocol:\n\n\nconnection_name\n: {\n    \ndriver\n: \npgsql\n,\n    \nquery\n: \nuser:password@hostname:port/site_db\n\n}\n\n\n\n\nIf you don't provide a port to your connection the ORM will use the default PostgreSQL port, which is the 5432 port.\n\n\nSQLite Connection\n\n\nConnecting to a sqlite database is super simple: you just provide the file name:\n\n\nconnection_name\n: {\n    \ndriver\n: \nsqlite\n,\n    \nquery\n: \nsite_db.db\n\n}\n\n\n\n\nYou can also provide the real path to the file:\n\n\nconnection_name\n: {\n    \ndriver\n: \nsqlite\n,\n    \nquery\n: \n/var/site_db.db\n\n}\n\n\n\n\nIf you adopt this solution you can keep the database file outside the web-server directory.\n\n\nUsing SQLite is great for prototyping but you don't want a sqlite file to be \nyour database in a production environment due to the limited number of concurrent \naccesses sqlite can handle.\n\n\nConclusions\n\n\nConnecting a database is simple, using it even more: the connection object is \nthe only thing you have to change/add when changing RDBMS and/or host!\n\n\nAs you may have noticed your settings file now contains your database password! \nYou \nMUST\n ensure no one will ever be able to reach that file!", 
            "title": "Management"
        }, 
        {
            "location": "/usage/database/management/#database-support", 
            "text": "If you are reading this it means that you are tired of using  SQL  or any other native database extension, aren't you? :D  I know: using SQL is tedious, error-prone and stucks you on a RDBMS, because changing it would force you \nchanging every SQL query you created.  Gishiki uses an OHM that is similar to ruby's one and implements the ActiveRecord pattern.   Yes, that is not a misspell: Gishiki uses an OHM, not an ORM! OHM stands for \"Object-hybrid mapper\"!\nThis OHM has been designed and written from scratch to be perfectly integrated within Gishiki!  The ActiveRecord implementation is meant to support any database you want:   SQLite (~3)  MySQL and derivates  Oracle  PostgreSQL  Microsoft SQL Server / Azure  Sybase  firebase  MongoDB ( = 3.0)  Cassandra   This abstract the database away from you, wichever database you may be using! Even non-relation ones!", 
            "title": "Database support"
        }, 
        {
            "location": "/usage/database/management/#connection", 
            "text": "Before discussing about how you manage your database you have to provide a valid connection to your database.  You do this by editing the config.json file. A connection to a database is a JSON object inside the  database_connections \nclass.  The default database connection is named 'default' and you  shouldn't  delete it, however you are free to change it.  Keep in mind that there is a connection named 'development' and, like the 'default' one shouldn't be deleted, because that connection\nis the default connection when the framework is in developer mode  Adding a database connection is as simple as adding a JSON object to the database_connections object:  connection_name : {\n     driver :  mysql ,\n     query :  root:admin@localhost/site_db \n}  Before testing out a connection remember to install the required  PDO driver / native extension  for your database server!", 
            "title": "Connection"
        }, 
        {
            "location": "/usage/database/management/#quick-syntax", 
            "text": "You can implode the driver and the connection query into a single string, like this\none:  connection_name :  mysql://root:admin@localhost/site_db   This is also especially usefull to integrate Heroku database connection strings!", 
            "title": "Quick Syntax"
        }, 
        {
            "location": "/usage/database/management/#mongodb", 
            "text": "MongoDB is for sure a great database and using it will avoid a lot of troubles.  The support for MongoDB is native and to have the better experience possible\nGishiki uses the latest driver available (currenctly the PECL mongodb package).  After installing the required extension you connect to the database using the mongodb-style URI :  connection_name : {\n     driver :  mongodb ,\n     query :  [username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]] \n}  Notice that 'mongodb://' is excluded from the connection query.", 
            "title": "MongoDB"
        }, 
        {
            "location": "/usage/database/management/#mysql-connection", 
            "text": "MySQL is the second most widely used RDBMS in the world (as of April 2016), and one of the RDBMS with more project forks!  With a MySQL connection you can connect to  MySQL ,  Percona Server ,  MariaDB  and many more!  When connecting to a MySQL server you have to use \"mysql\" as the server protocol:  connection_name : {\n     driver :  mysql ,\n     query :  user:password@localhost/site_db \n}  As you can see if you don't specify a server port the dafault one will be used (in MySQL it is 3306).  To specify a port you have to append it after the hostname:  connection_name : {\n     driver :  mysql ,\n     query :  user:password@hostname:port/site_db \n}  and the specified port will be used when connecting to the database.", 
            "title": "MySQL Connection"
        }, 
        {
            "location": "/usage/database/management/#oracle-connection", 
            "text": "If you are using Oracle as your RDBMS you can connect to your database exactly like\nyou would connect to a MySQL database: you only need to use oci as server protocol!  connection_name : {\n     driver :  oci ,\n     query :  user:password@hostname:port/site_db \n}  and et voila' Oracle database connection performed!", 
            "title": "Oracle Connection"
        }, 
        {
            "location": "/usage/database/management/#postgresql-connection", 
            "text": "I can't believe people are just ingnoring the fantastic  PostgreSQL  project: \nit is a fantastic RDBMS with a great usage license!  Everyone should think about PostgreSQL as its first choice as RDBMS, because it is easy to use, mature, \nwell supported and really performs well!  To enstabilish a connection with a Postgres server you  have to use pgsql as the server protocol:  connection_name : {\n     driver :  pgsql ,\n     query :  user:password@hostname:port/site_db \n}  If you don't provide a port to your connection the ORM will use the default PostgreSQL port, which is the 5432 port.", 
            "title": "PostgreSQL Connection"
        }, 
        {
            "location": "/usage/database/management/#sqlite-connection", 
            "text": "Connecting to a sqlite database is super simple: you just provide the file name:  connection_name : {\n     driver :  sqlite ,\n     query :  site_db.db \n}  You can also provide the real path to the file:  connection_name : {\n     driver :  sqlite ,\n     query :  /var/site_db.db \n}  If you adopt this solution you can keep the database file outside the web-server directory.  Using SQLite is great for prototyping but you don't want a sqlite file to be \nyour database in a production environment due to the limited number of concurrent \naccesses sqlite can handle.", 
            "title": "SQLite Connection"
        }, 
        {
            "location": "/usage/database/management/#conclusions", 
            "text": "Connecting a database is simple, using it even more: the connection object is \nthe only thing you have to change/add when changing RDBMS and/or host!  As you may have noticed your settings file now contains your database password! \nYou  MUST  ensure no one will ever be able to reach that file!", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/database/models/", 
            "text": "Models\n\n\nYou \nshould\n read this chapter \nonly\n if you have already read how to \nmanage database connections\n \nwhere you learn how to connect with your database.\n\n\nIn this chapter you will learn what a model is and how you create and use one.\n\n\nModels are the 'M' in 'MVC': they are the interface you use to load, store and access \nyour data within your application.\n\n\nDefining a model\n\n\nA model looks like a PHP file (inside the Models directory) containing a class \nthat inherits from the \\Activerecord\\Model class:\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel { }\n\n\n\n\nActiveRecord uses Ruby's ActiveRecord naming conventions, this means the declared \nmodel class is a direct representation of the table named 'book_sellers' residing \ninside the database pointed by the default database connection.\n\n\nYou can change both: the connection used and the name of the table inside the\ndatabase pointed by the database connection:\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel {\n    # explicit the connection name since the default one is not going to be used\n    static $connection = 'development';\n\n    # explicit the table name since the real table name is not 'book_sellers'\n    static $table_name = 'book_shop';\n\n}\n\n\n\n\nEach table \nMUST\n contain a primary key, and if the \nname of the primary key is \nNOT\n 'id' you will have to specify it in the model:\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel {\n    # the primary key of the table isn't named 'id'\n    static $primary_key = 'b_seller_ID';\n}\n\n\n\n\nAs you can see it is really simple to map a database table inside a PHP class.\nThis brings you many advantages, many of them are:\n\n\n\n\nNo hand-writte SQL\n\n\nData storage engine abstraction\n\n\nEasy DBMS migration\n\n\nRapid development\n\n\nBetter logical organization of your data\n\n\nEasy data management\n\n\nSeparation of application data and application logic\n\n\nOperations are easy to read and understand\n\n\n\n\nBasic model operations\n\n\nYou have represented a database table as a PHP class, where class properties are \nthe table fields; now you need to create an instance of that model and perform read/write \non properties of that object!\n\n\nLet's consider a table named 'books' that has a primary key named 'id', a (TEXT) field 'title', \na (TEXT) field 'author', a (REAL) field 'price' and a (DATETIME) field 'publication_date':\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass Book extends ActiveModel { }\n\n$my_book = new Book();\n$my_book-\ntitle = 'Example Book';\n$my_book-\nauthor = 'Example Author';\n$my_book-\nprice = 29.99;\n\n\n\n\nOh? What was that!? Was my database filled!?!? How?!?!? Where?!?!?\n\n\nYup. As explained in the \nCRUD\n section, in order to simplify even more your \ndatabase interaction, you have your models being saved automatically!\n\n\nAdvanced model operations\n\n\nAccessiong your model data as a class property can be easy, but it doesn't give you \na lot of flexibility: think about a password: You want to encrypt a password before \nstoring it into the database... You would need to do something like this:\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass User extends ActiveModel { }\n\n$my_user = new User();\n//$my_user-\n....\n\n//encrypt the passowrd\n$enc_pwd = encrypt($plain_password);\n$my_user-\npassword = $enc_pwd;\n\n\n\n\nIt is ugly to read, you will mostly likely forget to encrypt() your password somewere\nand you will need to call unencrypt() each time you want to read the password.\n\n\nIn this situation you \nshould\n use custom filtering, allowing you to \nabstract away from your controllers the encryption stuff, embedding it into the model:\n\n\nuse \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass User extends ActiveModel {\n    public function __filter_set_password($unfiltered_password) {\n        return encrypt($unfiltered_password);\n    }\n\n    public function __filter_get_password($filtered_password) {\n        return unencrypt($unfiltered_password);\n    }\n}\n\n$my_user = new User();\n$my_user-\npassword = $plain_password;\n\necho $my_user-\npassword; //print out $plain_password\n\n\n\n\nNote\n: you \nonly\n define \nHOW\n ransformations are performed: everything else\nis abstracted away from you.\n\n\nConclusions\n\n\nStore 'n' Load\n: what this chapter describes is how to deal whit your data when \nit is in-memory, however not your entire data can reside into volatile memory: \nthis is why you are using a database, right?\n\n\nThis means there \nmust\n be a way to easily manage your data on the database...\n\n\nActually, it is really simple, you can find almost everything in the \nCRUD\n section.", 
            "title": "Models"
        }, 
        {
            "location": "/usage/database/models/#models", 
            "text": "You  should  read this chapter  only  if you have already read how to  manage database connections  \nwhere you learn how to connect with your database.  In this chapter you will learn what a model is and how you create and use one.  Models are the 'M' in 'MVC': they are the interface you use to load, store and access \nyour data within your application.", 
            "title": "Models"
        }, 
        {
            "location": "/usage/database/models/#defining-a-model", 
            "text": "A model looks like a PHP file (inside the Models directory) containing a class \nthat inherits from the \\Activerecord\\Model class:  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel { }  ActiveRecord uses Ruby's ActiveRecord naming conventions, this means the declared \nmodel class is a direct representation of the table named 'book_sellers' residing \ninside the database pointed by the default database connection.  You can change both: the connection used and the name of the table inside the\ndatabase pointed by the database connection:  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel {\n    # explicit the connection name since the default one is not going to be used\n    static $connection = 'development';\n\n    # explicit the table name since the real table name is not 'book_sellers'\n    static $table_name = 'book_shop';\n\n}  Each table  MUST  contain a primary key, and if the \nname of the primary key is  NOT  'id' you will have to specify it in the model:  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass BookSeller extends ActiveModel {\n    # the primary key of the table isn't named 'id'\n    static $primary_key = 'b_seller_ID';\n}  As you can see it is really simple to map a database table inside a PHP class.\nThis brings you many advantages, many of them are:   No hand-writte SQL  Data storage engine abstraction  Easy DBMS migration  Rapid development  Better logical organization of your data  Easy data management  Separation of application data and application logic  Operations are easy to read and understand", 
            "title": "Defining a model"
        }, 
        {
            "location": "/usage/database/models/#basic-model-operations", 
            "text": "You have represented a database table as a PHP class, where class properties are \nthe table fields; now you need to create an instance of that model and perform read/write \non properties of that object!  Let's consider a table named 'books' that has a primary key named 'id', a (TEXT) field 'title', \na (TEXT) field 'author', a (REAL) field 'price' and a (DATETIME) field 'publication_date':  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass Book extends ActiveModel { }\n\n$my_book = new Book();\n$my_book- title = 'Example Book';\n$my_book- author = 'Example Author';\n$my_book- price = 29.99;  Oh? What was that!? Was my database filled!?!? How?!?!? Where?!?!?  Yup. As explained in the  CRUD  section, in order to simplify even more your \ndatabase interaction, you have your models being saved automatically!", 
            "title": "Basic model operations"
        }, 
        {
            "location": "/usage/database/models/#advanced-model-operations", 
            "text": "Accessiong your model data as a class property can be easy, but it doesn't give you \na lot of flexibility: think about a password: You want to encrypt a password before \nstoring it into the database... You would need to do something like this:  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass User extends ActiveModel { }\n\n$my_user = new User();\n//$my_user- ....\n\n//encrypt the passowrd\n$enc_pwd = encrypt($plain_password);\n$my_user- password = $enc_pwd;  It is ugly to read, you will mostly likely forget to encrypt() your password somewere\nand you will need to call unencrypt() each time you want to read the password.  In this situation you  should  use custom filtering, allowing you to \nabstract away from your controllers the encryption stuff, embedding it into the model:  use \\Gishiki\\ActiveRecord\\ActiveModel;\n\nclass User extends ActiveModel {\n    public function __filter_set_password($unfiltered_password) {\n        return encrypt($unfiltered_password);\n    }\n\n    public function __filter_get_password($filtered_password) {\n        return unencrypt($unfiltered_password);\n    }\n}\n\n$my_user = new User();\n$my_user- password = $plain_password;\n\necho $my_user- password; //print out $plain_password  Note : you  only  define  HOW  ransformations are performed: everything else\nis abstracted away from you.", 
            "title": "Advanced model operations"
        }, 
        {
            "location": "/usage/database/models/#conclusions", 
            "text": "Store 'n' Load : what this chapter describes is how to deal whit your data when \nit is in-memory, however not your entire data can reside into volatile memory: \nthis is why you are using a database, right?  This means there  must  be a way to easily manage your data on the database...  Actually, it is really simple, you can find almost everything in the  CRUD  section.", 
            "title": "Conclusions"
        }, 
        {
            "location": "/usage/database/CRUD/", 
            "text": "CRUD\n\n\nCRUD stands for \nC\nreate, \nR\nead, \nU\npdate and \nD\nelete.\n\n\nThose are the names of most common operations you perform on your database, \nand the easiest way you have to manage your database using your models.", 
            "title": "CRUD"
        }, 
        {
            "location": "/usage/database/CRUD/#crud", 
            "text": "CRUD stands for  C reate,  R ead,  U pdate and  D elete.  Those are the names of most common operations you perform on your database, \nand the easiest way you have to manage your database using your models.", 
            "title": "CRUD"
        }, 
        {
            "location": "/license/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}